#!/bin/bash
clear #Limpar tela
#CONFVPS3: V4
function squid3-installer {
# squid3 installer
# v5
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
clear
reinstall () 
{
#!/bin/bash
clear
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
if [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
fi
if [[ -e /etc/debian_version ]]; then
	OS="debian"
fi
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
IP=$(cat /etc/IP)
so=$(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/	//')
PORTS="3128 8080 & 80"
SSH="443 & 22"
dono=$(cat /etc/dono)
SIP=$(printf '%-23s' "$IP")
soo=$(printf '%-20s' "$so")
porta=$(printf '%-23s' "$PORTS")
ssh=$(printf '%-23s' "$SSH")
donu=$(printf '%-21s' "$dono")
echo -e "          $b==========>>>"$v"SQUID INSTALLER"$b"<<<=========="
echo ""
echo -e ""$b"--------------------------------------------------------"
echo -e "| $Ver---> "$b"SEU IP: "$Ver"       --->    "$v"$SIP  $b|
| $Ver---> "$b"PORTAS SSH: "$Ver"   --->   "$v" $ssh  $b|
| $Ver---> "$b"PORTAS SQUID: "$Ver" --->   "$v" $porta  $b|
| $Ver---> "$b"SEU NOME: "$Ver"     --->   "$v" $donu    $b|
| $Ver---> "$b"SISTEMA: "$Ver"      --->   "$v" $soo     $b|"
echo -e ""$b"--------------------------------------------------------"
echo ""
echo -e "[[ "$Ver"--> "$b"NSTALANDO PRE REQUISITOS...]]"
    if [[ "$OS" = 'debian' ]]; then
      apt-get install squid -y >/dev/null 2>/dev/null
      fi
      
      if [[ "$OS" = 'debian' ]]; then
      apt-get install squid3 -y >/dev/null 2>/dev/null
      fi
      
		if [[ "$VERSION_ID" = 'VERSION_ID="7"' ]]; then
			apt-get update 1>/dev/null 2>/dev/null
            apt -get install squid3 -y 1>/dev/null 2>/dev/null
		fi
# debian 8
if [[ "$VERSION_ID" = 'VERSION_ID="8"' ]]; then
			apt-get update 1>/dev/null 2>/dev/null
            if apt-get install squid -y 1>/dev/null 2>/dev/null
             then
         echo ""
           else
           apt-get install squid3 -y 1>/dev/null 2>/dev/null
		fi
fi
#Ubuntu 12.04
if [[ "$VERSION_ID" = 'VERSION_ID="12.04"' ]]; then
			apt-get update 1>/dev/null 2>/dev/null
            apt -get install squid3 -y 1>/dev/null 2>/dev/null
		fi
# Ubuntu 14.04
		if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
			apt-get update 1>/dev/null 2>/dev/null
            apt -get install squid3 -y 1>/dev/null 2>/dev/null
		fi
# Ubuntu 16.04
if [[ "$VERSION_ID" = 'VERSION_ID="16.04"' ]]; then
            apt-get update 1>/dev/null 2>/dev/null
            apt -get install squid -y 1>/dev/null 2>/dev/null
fi
# Ubuntu 16.10
if [[ "$VERSION_ID" = 'VERSION_ID="16.10"' ]]; then
            apt-get update 1>/dev/null 2>/dev/null
            apt -get install squid -y 1>/dev/null 2>/dev/null
fi
# Ubuntu 17.04
if [[ "$VERSION_ID" = 'VERSION_ID="17.04"' ]]; then
            apt-get update 1>/dev/null 2>/dev/null
            apt -get install squid -y 1>/dev/null 2>/dev/null
fi
# Ubuntu 17.04
if [[ "$VERSION_ID" = 'VERSION_ID="17.10"' ]]; then
            apt-get update 1>/dev/null 2>/dev/null
            apt -get install squid -y 1>/dev/null 2>/dev/null
fi
# CentOS
if [[ "$OS" = 'centos' ]]; then
yum update >/dev/null 2>/dev/null
yum -y install squid >/dev/null 2>/dev/null
fi
echo -e "$b  ["$v"OK$b]  "$v"Sucesso..."
sleep 2

echo -e ""$b"[[ "$Ver"--> "$b"ALTERANDO SSH...]]"
if cat /etc/ssh/sshd_config | grep "Port 443"; then
true
else
echo 'Port 443
PermitRootLogin yes
PubkeyAuthentication yes
PasswordAuthentication yes
' >> /etc/ssh/sshd_config
fi
sleep 2
echo -e "$b  ["$v"OK$b]  "$v"Sucesso..."

if [[ -d /etc/squid ]]; then
echo -e ""$b"[[ "$Ver"--> "$b"ALTERANDO SQUID...]]"
echo "# ACLs e Liberações
acl accept dstdomain -i $IP
acl allowed dstdomain -i /etc/payloads
acl combr dstdomain -i .com.br
acl com dstdomain -i .com
acl all src 0.0.0.0/0.0.0.0
http_access allow accept
http_access allow allowed
http_access allow combr
http_access allow com
http_access deny all
always_direct allow all
# Anonimo
forwarded_for off
# Pipeline
#pipeline_prefetch on
# Portas 
http_port 80
http_port 8080
http_port 3128" >/etc/squid/squid.conf
sleep 1
echo -e "$b  ["$v"OK$b]  "$v"Sucesso..."
else
echo -e ""$b"[[ "$Ver"--> "$b"ALTERANDO SQUID3...]]"
echo "# ACLs e Liberações
acl accept dstdomain -i $IP
acl allowed dstdomain -i /etc/payloads
acl combr dstdomain -i .com.br
acl com dstdomain -i .com
acl all src 0.0.0.0/0.0.0.0
http_access allow accept
http_access allow allowed
http_access allow combr
http_access allow com
http_access deny all
always_direct allow all
# Anonimo
forwarded_for off
# Pipeline
#pipeline_prefetch on
# Portas 
http_port 80
http_port 8080
http_port 3128" >/etc/squid3/squid.conf
sleep 2
echo -e "$b  ["$v"OK$b]  "$v"Sucesso..."
fi
echo -e "$b""[[ "$Ver"--> "$b"RENICIANDO SERVICOS...]]"
if service ssh restart >/dev/null 2>/dev/null; then
service squid restart >/dev/null 2>/dev/null
service squid3 restart >/dev/null 2>/dev/null
else
service sshd restart >/dev/null 2>/dev/null
service squid restart >/dev/null 2>/dev/null
fi
echo ".claro.com.br
.claro.com.sv
.vivo.com.br
.ddivulga.com" > /etc/payloads
sleep 1
echo -e "$b  ["$v"OK$b]  "$v"Sucesso..."
echo ""
echo -e ""$b"--------------------------------------------------------"
echo -e "SQUID INSTALADO COM SUCESSO, AGORA CRIE UM USUARIO E\nTESTE PRA VER SI ESTAR TUDO OK"
echo -e ""$b"--------------------------------------------------------"
}
if [[ -f /etc/squid3/squid.conf ]]; then
    echo -e "      "$b"SQUID3 INSTALADO!"
    echo ""
    echo -e "
"$b"["$v"01"$b"]"$Ver" RENICIAR SQUID3
"$b"["$v"02"$b"]"$Ver" PARAR SQUID3
"$b"["$v"03"$b"]"$Ver" REINSTALAR SQUID3
"$b"["$v"04"$b"]"$Ver" DESISTALAR SQUID3
"$b"["$v"05"$b"]"$Ver" ADICIONAR PORTA
"$b"["$v"06"$b"]"$Ver" REMOVER PORTA
"$b"["$v"07"$b"]"$Ver" SAIR"
    echo ""
    echo -e ""$Ver"["$v"Escolha uma opcao$Ver]";echo -n ": ";read option1

case $option2 in
1)
echo -e ""$b"RENICIANDO SQUID3..."
service squid3 reload 1>/dev/null 2>/dev/null
service squid3 restart 1>/dev/null 2>/dev/null
sleep 1
echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
sleep 1
echo -e ""$b"SQUID3 RENICIADO!"
exit
;;
2)
echo -e ""$b"PARANDO SQUID3..."
service squid3 stop 1>/dev/null 2>/dev/null
sleep 1
echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
sleep 1
echo -e ""$b"SQUID3 PARADO!"
exit
;;
3)
echo -e ""$b"REISTALANDO SQUID3..."
apt-get purge squid3 -y 1>/dev/null 2>/dev/null
apt-get autoremove -y 1>/dev/null 2>/dev/null
reinstall
exit
;;
4)
echo -e ""$b"DESISTALANDO SQUID3..."
apt-get purge squid3 -y 1>/dev/null 2>/dev/null
apt-get autoremove -y 1>/dev/null 2>/dev/null
sleep 1
echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
sleep 1
echo -e ""$b"SQUID3 DESISTALDO!"
exit
;;
5)
echo -e ""$b"          Portas adicionadas"
echo ''
cat /etc/squid3/squid.conf | grep 'http_port' | awk {'print $2'}
echo ''
read -p "Digite a porta para add: " porta
echo "http_port $porta" >> /etc/squid3/squid.conf
cat /etc/squid3/squid.conf | grep 'http_port' | awk {'print $2'}
echo ''
echo -e "Porta Adicionada"
echo '' 
echo -e "Reniciando squid3..."
service squid3 restart 1>/dev/null 2>/dev/null
echo ''
echo -e "Fim"
exit
;;
6)
echo -e ""$b"          Portas adicionadas"
echo '' 
cat /etc/squid3/squid.conf | grep 'http_port' | awk {'print $2'}
echo ''
read -p "Digite a porta para remover: " porta
port=$(cat /etc/squid3/squid.conf | grep -v "http_port $porta")
echo "$port" > /etc/squid3/squid.conf
cat /etc/squid3/squid.conf | grep 'http_port' | awk {'print $2'}
echo -e "Porta Removida"
echo ''
echo -e "Reniciando squid3..."
service squid3 restart 1>/dev/null 2>/dev/null
echo ''
echo -e "Fim"
exit
;;
7)
echo -e ""$b"SAINDO..."
sleep 2
exit
;;
esac
else 
if [[ -f /etc/squid/squid.conf ]]; then
    echo -e "      "$b"SQUID INSTALADO!"
    echo ""
    echo -e "
"$b"["$v"01"$b"]"$Ver" RENICIAR SQUID
"$b"["$v"02"$b"]"$Ver" PARAR SQUID
"$b"["$v"03"$b"]"$Ver" REINSTALAR SQUID
"$b"["$v"04"$b"]"$Ver" DESISTALAR SQUID
"$b"["$v"05"$b"]"$Ver" ADICIONAR PORTA
"$b"["$v"06"$b"]"$Ver" REMOVER PORTA
"$b"["$v"07"$b"]"$Ver" SAIR"
    echo ""
    echo -e ""$Ver"["$v"Escolha uma opcao$Ver]";echo -n ": ";read option2
clear
case $option2 in
1)
echo -e ""$b"RENICIANDO SQUID..."
service squid reload 1>/dev/null 2>/dev/null
service squid restart 1>/dev/null 2>/dev/null
sleep 1
echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
sleep 1
echo -e ""$b"SQUID RENICIADO!"
exit
;;
2)
echo -e ""$b"PARANDO SQUID..."
service squid stop 1>/dev/null 2>/dev/null
sleep 1
echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
sleep 1
echo -e ""$b"SQUID PARADO!"
exit
;;
3)
echo -e ""$b"REISTALANDO SQUID..."
apt-get purge squid -y 1>/dev/null 2>/dev/null
apt-get autoremove -y 1>/dev/null 2>/dev/null
reinstall
exit
;;
4)
echo -e ""$b"DESISTALANDO SQUID..."
apt-get purge squid -y 1>/dev/null 2>/dev/null
apt-get autoremove -y 1>/dev/null 2>/dev/null
sleep 1
echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
sleep 1
echo -e ""$b"SQUID DESISTALDO!"
exit
;;
5)
echo -e ""$b"          Portas adicionadas"
echo ''
cat /etc/squid/squid.conf | grep 'http_port' | awk {'print $2'}
echo ''
read -p "Digite a porta para add: " porta
echo "http_port $porta" >> /etc/squid/squid.conf
cat /etc/squid/squid.conf | grep 'http_port' | awk {'print $2'}
echo ''
echo -e "Porta Adicionada"
echo ''
echo -e "Reniciando squid..."
service squid restart 1>/dev/null 2>/dev/null
echo ''
echo -e "Fim"
exit
;;
6)
echo -e ""$b"          Portas adicionadas"
echo '' 
cat /etc/squid/squid.conf | grep 'http_port' | awk {'print $2'}
echo ''
read -p "Digite a porta para remover: " porta
port=$(cat /etc/squid/squid.conf | grep -v "http_port $porta")
echo "$port" > /etc/squid/squid.conf
cat /etc/squid/squid.conf | grep 'http_port' | awk {'print $2'}
echo ''
echo "\033[1;31mPorta Removida\033[1;37m"
echo ''
echo -e "Reniciando squid..."
service squid restart 1>/dev/null 2>/dev/null
echo ''
echo -e "Fim"
exit
;;
7)
echo -e ""$b"SAINDO..."
sleep 2
exit
;;
esac
  fi
 fi
reinstall
}

function vpn-installer {
# OpenVPN installer
# v1
#!/bin/bash
# OPEN VPN V1
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
if grep -qs "CentOS release 5" "/etc/redhat-release"; then
	echo -e "033[1;31mCentOS 5 nao e suportado"
        sleep 0.7
        echo -e 'saindo...'
        sleep 1
	exit 4
fi
if [[ -e /etc/debian_version ]]; then
	OS=debian
	GROUPNAME=nogroup
	RCLOCAL='/etc/rc.local'
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
	GROUPNAME=nobody
	RCLOCAL='/etc/rc.d/rc.local'
else
	echo -e "Seu sistema nao e suportado"
	exit 5
fi
newclient () {
	# Generates the custom client.ovpn
	cp /etc/openvpn/client-common.txt ~/$1.ovpn
	echo "<ca>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/$1.ovpn
	echo "</ca>" >> ~/$1.ovpn
	echo "<cert>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >> ~/$1.ovpn
	echo "</cert>" >> ~/$1.ovpn
	echo "<key>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/private/$1.key >> ~/$1.ovpn
	echo "</key>" >> ~/$1.ovpn
	echo "<tls-auth>" >> ~/$1.ovpn
	cat /etc/openvpn/ta.key >> ~/$1.ovpn
	echo "</tls-auth>" >> ~/$1.ovpn
}
IP=$(wget -4qO- glemyson.hol.es)
if [[ -e /etc/openvpn/server.conf ]]; then
	while :
	do
	clear
		echo -e "$b""============="$v"OpenVPN Instalado"$b"============="
		echo
		echo -e "$b["$v"01$b]$Ver ADICIONAR NOVO USUARIO"
		echo -e "$b["$v"02$b]$Ver REMOVER USUARIOS"
		echo -e "$b["$v"03$b]$Ver REMOVER OPENVPN"
		echo -e "$b["$v"04$b]$Ver SAIR"
                echo ''
		echo -e "$b["$v"Escolha uma opcao"$b"]";read -p ":"  option
		case $option in
			1) 
			echo ""
			clear
                        echo -e "$b""==================================="
                        echo -e "$b"'Por favor digite nome do usuario'
                        echo -e -n "$b"
			read -p "Nome: " -e -i client CLIENT
			cd /etc/openvpn/easy-rsa/
			./easyrsa build-client-full $CLIENT nopass
			# Generates the custom client.ovpn
			newclient "$CLIENT"
			echo ""
			echo -e "Usuario "$v"$CLIENT"$b" foi criado ~/"$CLIENT.ovpn""
			exit
			;;
			2)
			# This option could be documented a bit better and maybe even be simplimplified
			# ...but what can I say, I want some sleep too
			NUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
			if [[ "$NUMBEROFCLIENTS" = '0' ]]; then
				echo ""
				echo -e "\033[1;31mVoce nao tem usuarios existentes..."
                                sleep 1
                                echo -e 'Saindo...'
                                sleep 1
				exit 6
			fi
			echo ""
			echo -e "b""========================"
                        echo -e "$v"'Escolha um usuario'
                        echo ''
			tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
			if [[ "$NUMBEROFCLIENTS" = '1' ]]; then
				echo -e "$b["$v"Escolha uma usuario"$b"]";read -p ":" CLIENTNUMBER
			else
				echo -e "$b["$v"Escolha uma usuario"$b"]";read -p ":" CLIENTNUMBER
			fi
			CLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENTNUMBER"p)
			cd /etc/openvpn/easy-rsa/
			./easyrsa --batch revoke $CLIENT
			./easyrsa gen-crl
			rm -rf pki/reqs/$CLIENT.req
			rm -rf pki/private/$CLIENT.key
			rm -rf pki/issued/$CLIENT.crt
			rm -rf /etc/openvpn/crl.pem
			cp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem
			# CRL is read with each client connection, when OpenVPN is dropped to nobody
			chown nobody:$GROUPNAME /etc/openvpn/crl.pem
			echo ""
			echo -e ''$b'Usuario '$v'$CLIENT '$b'Removido'
			exit
			;;
			3) 
			echo ""
			echo -e "$b["$v"Deseja mesmo remover openvpn? y/n"$b"]";read -p ":" -e -i n REMOVE
			if [[ "$REMOVE" = 'y' ]]; then
				PORT=$(grep '^port ' /etc/openvpn/server.conf | cut -d " " -f 2)
				PROTOCOL=$(grep '^proto ' /etc/openvpn/server.conf | cut -d " " -f 2)
				if pgrep firewalld; then
					IP=$(firewall-cmd --direct --get-rules ipv4 nat POSTROUTING | grep '\-s 10.8.0.0/24 '"'"'!'"'"' -d 10.8.0.0/24 -j SNAT --to ' | cut -d " " -f 10)
					# Using both permanent and not permanent rules to avoid a firewalld reload.
					firewall-cmd --zone=public --remove-port=$PORT/$PROTOCOL
					firewall-cmd --zone=trusted --remove-source=10.8.0.0/24
					firewall-cmd --permanent --zone=public --remove-port=$PORT/$PROTOCOL
					firewall-cmd --permanent --zone=trusted --remove-source=10.8.0.0/24
					firewall-cmd --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
					firewall-cmd --permanent --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
				else
					IP=$(grep 'iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to ' $RCLOCAL | cut -d " " -f 14)
					iptables -t nat -D POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
					sed -i '/iptables -t nat -A POSTROUTING -s 10.8.0.0\/24 ! -d 10.8.0.0\/24 -j SNAT --to /d' $RCLOCAL
					if iptables -L -n | grep -qE '^ACCEPT'; then
						iptables -D INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
						iptables -D FORWARD -s 10.8.0.0/24 -j ACCEPT
						iptables -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
						sed -i "/iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT/d" $RCLOCAL
						sed -i "/iptables -I FORWARD -s 10.8.0.0\/24 -j ACCEPT/d" $RCLOCAL
						sed -i "/iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT/d" $RCLOCAL
					fi
				fi
				if hash sestatus 2>/dev/null; then
					if sestatus | grep "Current mode" | grep -qs "enforcing"; then
						if [[ "$PORT" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
							semanage port -d -t openvpn_port_t -p $PROTOCOL $PORT
						fi
					fi
				fi
				if [[ "$OS" = 'debian' ]]; then
					apt-get remove --purge -y openvpn
				else
					yum remove openvpn -y
				fi
				rm -rf /etc/openvpn
				echo "OpenVPN removido!"
			else
				echo -n""
				echo "Remoção abortada!"
			fi
			exit
			;;
			4) exit;;
		esac
	done
fi
clear
IP=$(cat /etc/IP)
echo -e ''$b'=========='$v'OpenVPN Installer'$b'==========='
echo '--------------------------------'
read -p "Confirme seu IP: " -e -i $IP
echo '--------------------------------'
echo -e ""$b"Escolha um protocolo"
echo ''
echo -e "$b["$v"01$b]$Ver TCP"
echo -e "$b["$v"02$b]$Ver UDP"
printf "$b"
read -p "Escolha uma opcao: " -e -i 1 PROTOCOL
case $PROTOCOL in
1) 
PROTOCOL=udp
;;
2) 
PROTOCOL=tcp
;;
esac
echo '--------------------------------'
echo -e "Escolha uma porta"
echo ''
echo -e "$b["$v"01$b]$Ver 53"
echo -e "$b["$v"02$b]$Ver 21"
echo -e "$b["$v"03$b]$Ver 1194"
printf "$b"
read -p "Escolha uma opcao: " -e -i 1 PORT
case $PORT in
1|53)
PORT=53
;;
2|21)
PORT=21
;;
3|1194)
PORT=1194
;;
esac
echo '--------------------------------'
echo -e "Escolha um DNS"
echo ''
echo -e "$b["$v"01$b]$Ver DNS do sistema"
echo -e "$b["$v"02$b]$Ver GOOGLE DNS"
echo -e "$b["$v"03$b]$Ver OPENDNS"
echo -e "$b["$v"04$b]$Ver NTT"
printf "$b"
read -p "Escolha uma opcao: " -e -i 2 DNS
echo '--------------------------------'
read -p "De enter para continuar..."
clear
echo -e "Instalando OpenVPN..."
if [[ "$OS" = 'debian' ]]; then
		apt-get update 1>/dev/null 2>/dev/null
		apt-get install openvpn iptables openssl ca-certificates -y 1>/dev/null 2>/dev/null
	else
		yum install epel-release -y 1>/dev/null 2>/dev/null
		yum install openvpn iptables openssl wget ca-certificates -y 1>/dev/null 2>/dev/null
	fi
echo -e "$b  ["$v"OK$b]  "$v"Sucesso...$b"
sleep 1
echo -e "Configurando OpenVPN..."
if [[ -d /etc/openvpn/easy-rsa/ ]]; then
		rm -rf /etc/openvpn/easy-rsa/
	fi
	# Get easy-rsa
	wget -O ~/EasyRSA-3.0.1.tgz "https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz"
	tar xzf ~/EasyRSA-3.0.1.tgz -C ~/
	mv ~/EasyRSA-3.0.1/ /etc/openvpn/
	mv /etc/openvpn/EasyRSA-3.0.1/ /etc/openvpn/easy-rsa/
	chown -R root:root /etc/openvpn/easy-rsa/
	rm -rf ~/EasyRSA-3.0.1.tgz
	cd /etc/openvpn/easy-rsa/
	# Create the PKI, set up the CA, the DH params and the server + client certificates
	./easyrsa init-pki
	./easyrsa --batch build-ca nopass
	./easyrsa gen-dh
	./easyrsa build-server-full server nopass
	./easyrsa build-client-full $CLIENT nopass
	./easyrsa gen-crl
	# Move the stuff we need
	cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key pki/crl.pem /etc/openvpn
	# CRL is read with each client connection, when OpenVPN is dropped to nobody
	chown nobody:$GROUPNAME /etc/openvpn/crl.pem
	# Generate key for tls-auth
	openvpn --genkey --secret /etc/openvpn/ta.key
	# Generate server.conf
	echo "port $PORT
proto $PROTOCOL
dev tun
sndbuf 0
rcvbuf 0
ca ca.crt
cert server.crt
key server.key
dh dh.pem
auth SHA512
tls-auth ta.key 0
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" > /etc/openvpn/server.conf
	echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server.conf
	# DNS
	case $DNS in
		1) 
		# Obtain the resolvers from resolv.conf and use them for OpenVPN
		grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
			echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server.conf
		done
		;;
		2) 
		echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
		;;
		3)
		echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server.conf
		;;
		4) 
		echo 'push "dhcp-option DNS 129.250.35.250"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 129.250.35.251"' >> /etc/openvpn/server.conf
		;;
		5) 
		echo 'push "dhcp-option DNS 74.82.42.42"' >> /etc/openvpn/server.conf
		;;
		6) 
		echo 'push "dhcp-option DNS 64.6.64.6"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 64.6.65.6"' >> /etc/openvpn/server.conf
		;;
	esac
	echo "keepalive 10 120
cipher AES-256-CBC
comp-lzo
user nobody
group $GROUPNAME
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify crl.pem" >> /etc/openvpn/server.conf
	# Enable net.ipv4.ip_forward for the system
	sed -i '/\<net.ipv4.ip_forward\>/c\net.ipv4.ip_forward=1' /etc/sysctl.conf
	if ! grep -q "\<net.ipv4.ip_forward\>" /etc/sysctl.conf; then
		echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
	fi
	# Avoid an unneeded reboot
	echo 1 > /proc/sys/net/ipv4/ip_forward
	if pgrep firewalld; then
		# Using both permanent and not permanent rules to avoid a firewalld
		# reload.
		# We don't use --add-service=openvpn because that would only work with
		# the default port and protocol.
		firewall-cmd --zone=public --add-port=$PORT/$PROTOCOL
		firewall-cmd --zone=trusted --add-source=10.8.0.0/24
		firewall-cmd --permanent --zone=public --add-port=$PORT/$PROTOCOL
		firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24
		# Set NAT for the VPN subnet
		firewall-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
		firewall-cmd --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
	else
		# Needed to use rc.local with some systemd distros
		if [[ "$OS" = 'debian' && ! -e $RCLOCAL ]]; then
			echo '#!/bin/sh -e
exit 0' > $RCLOCAL
		fi
		chmod +x $RCLOCAL
		# Set NAT for the VPN subnet
		iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
		sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP" $RCLOCAL
		if iptables -L -n | grep -qE '^(REJECT|DROP)'; then
			# If iptables has at least one REJECT rule, we asume this is needed.
			# Not the best approach but I can't think of other and this shouldn't
			# cause problems.
			iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
			iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
			iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
			sed -i "1 a\iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT" $RCLOCAL
			sed -i "1 a\iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $RCLOCAL
			sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
		fi
	fi
	# If SELinux is enabled and a custom port or TCP was selected, we need this
	if hash sestatus 2>/dev/null; then
		if sestatus | grep "Current mode" | grep -qs "enforcing"; then
			if [[ "$PORT" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
				# semanage isn't available in CentOS 6 by default
				if ! hash semanage 2>/dev/null; then
					yum install policycoreutils-python -y
				fi
				semanage port -a -t openvpn_port_t -p $PROTOCOL $PORT
			fi
		fi
	fi
	# And finally, restart OpenVPN
	if [[ "$OS" = 'debian' ]]; then
		# Little hack to check for systemd
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service
		else
			echo -e "$V""Ativo"
		fi
	else
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service
			systemctl enable openvpn@server.service
		else
			echo -e "$V""Ativo"
		fi
	fi
	echo "client
dev tun
proto $PROTOCOL
sndbuf 0
rcvbuf 0
remote $IP $PORT
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA512
cipher AES-256-CBC
comp-lzo
setenv opt block-outside-dns
key-direction 1
verb 3" > /etc/openvpn/client-common.txt
echo -e "$b  ["$v"OK$b]  "$v"Sucesso...$b"
sleep 1
echo -e "Reniciando servicos..."
service openvpn restart 1>/dev/null 2>/dev/null
echo -e "$b  ["$v"OK$b]  "$v"Sucesso...$b"
echo ''
echo -e "Instalacao finalizada com sucesso,
para criar usuarios exculte o $v"CONFVPS"$b opcao $v"3"$b"
}

function dropbear-installer {
# Dropbear installer 
# v3
#!/bin/bash
clear
# Dropbear installer v2
# CONFVPS
# cores
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
#
if cat /etc/shells |grep "/bin/false" >/dev/null; then
echo -n
else
echo "/bin/false" >>/etc/shells
fi
echo -e "\033[0m                \033[47;30m DROPBEAR INSTALLER\033[0m"
echo ''
echo -e '\033[1;37mAbaixo adicione uma porta para
adicionar ao dropbear.'
printf '\033[1;32mPorta: ';read porta
if [[ -z "$porta" ]]; then
  echo -e "\033[1;37mPorta invalida!"
  sleep 1.5
  echo -e "Saindo..."
  sleep 1.5
  exit 69
fi
if [[ "$porta" = '80' ]]; then
 if [[ -d /etc/squid3 ]]; then
	if cat /etc/squid3/squid.conf | grep 80 1> /dev/null 2> /dev/null ; then
		echo -e "$Ver"'Porta 80 esta ativa no squid3'
		echo ''
		echo -e "$b""Para continuar com a instalação do dropbear na\nporta 80 tera que remover a porta 80 do squid3"
		sleep 0.5
		echo ''
		read -p "Continuar? s/n: " re
		if [[ "$re" = 's' ]]; then
              echo -e "$v""Continuando..."
              sleep  1
              echo ''
              echo -e "\033[1;37mRemovendo porta do squid3..."
              p=$(cat /etc/squid3/squid.conf | sed s/"http_port 80"/"# http_port 80"/|grep -v "# http_port 8080" |sed s/"# http_port 80"/"http_port 8080"/)
              echo "$p" > /etc/squid3/squid.conf
              service squid3 restart 1>/dev/null 2>/dev/null
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo -e "\033[1;37mInstalando dropbear..."
              apt-get update 1>/dev/null 2>/dev/null
              apt-get install dropbear -y 1>/dev/null 2>/dev/null
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              sleep 1
              echo -e "\033[1;37mAdicionando porta..."
              echo "NO_START=0" > /etc/default/dropbear
              echo "DROPBEAR_PORT=80" >> /etc/default/dropbear
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo -e "\033[1;37mReniciando dropbear..."
              service dropbear start 1>/dev/null 2>/dev/null
              service dropbear restart 1>/dev/null 2>/dev/null
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo ''
              echo -e "\033[1;37mInstalacao finalizada com sucesso."
              exit 69
    fi 
    if [[ "$re" = 'n' ]]; then
               echo -e ""$Ver"Saindo..."
               sleep 1
               exit 69
    fi
    fi
 else
 true
 fi
 if [[ -d /etc/squid ]]; then
  if cat /etc/squid/squid.conf | grep 80 1> /dev/null 2> /dev/null ; then
		echo -e "$Ver"'Porta 80 esta ativa no squid'
		echo ''
		echo -e "$b""Para continuar com a instalação do dropbear na\nporta 80 tera que remover a porta 80 do squid"
		sleep 0.5
		echo ''
		read -p "Continuar? s/n: " rees
		if [[ "$rees" = 's' ]]; then
              echo -e "$v""Continuando..."
              sleep  1
              echo ''
              echo -e "\033[1;37mRemovendo porta do squid..."
              p=$(cat /etc/squid/squid.conf | sed s/"http_port 80"/"# http_port 80"/|grep -v "# http_port 8080" |sed s/"# http_port 80"/"http_port 8080"/)
              echo "$p" > /etc/squid/squid.conf
              service squid3 restart 1>/dev/null 2>/dev/null
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo -e "\033[1;37mInstalando dropbear..."
              apt-get update 1>/dev/null 2>/dev/null
              apt-get install dropbear -y 1>/dev/null 2>/dev/null
              sleep 1
              echo -e "\033[1;37mAdicionando porta..."
              echo "NO_START=0" > /etc/default/dropbear
              echo "DROPBEAR_PORT=80" >> /etc/default/dropbear
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo -e "\033[1;37mReniciando dropbear..."
              service dropbear start 1>/dev/null 2>/dev/null
              service dropbear restart 1>/dev/null 2>/dev/null
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo ''
              echo -e "\033[1;37mInstalacao finalizada com sucesso."
              exit 69
    fi
    if [[ "$rees" = 'n' ]]; then
               echo -e ""$Ver"Saindo..."
               sleep 1
               exit 69
    fi
    fi
fi
 else
 true
 fi
if [[ "$porta" = '443' ]]; then
  if cat /etc/ssh/sshd_config |grep "443" >/dev/null; then
    echo -e ""$Ver"Porta 443 esta adicionanda no sshd!"
    echo ''
    echo -e ""$b"Para continuar com a instalacao do dropbear\nna porta 443 teras que remover a porta 443 do sshd"
    echo ''
    read -p "Continuar s/n: " ss
      if [[ "$ss" = 's' ]]; then
      	echo -e "$v""Continuando..."
      	echo ''
      	echo -e "\033[1;37mRemovendo porta do sshd..."
      	port=$(cat /etc/ssh/sshd_config | grep -v "Port 443")
        echo "$port" > /etc/ssh/sshd_config
        sleep 1
        echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
        echo -e "\033[1;37mReniciando openssh..."
        service ssh restart >/dev/null 2>/dev/null
        sleep 1
        echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
        echo -e "\033[1;37mInstalando dropbear..."
        apt-get update 1>/dev/null 2>/dev/null
        apt-get install dropbear -y 1>/dev/null 2>/dev/null
        sleep 1
        echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
        echo -e "\033[1;37mAdicionando porta..."
echo "NO_START=0" > /etc/default/dropbear
echo "DROPBEAR_PORT=443" >> /etc/default/dropbear
        sleep 1
        echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
        echo -e "\033[1;37mReniciando dropbear..."
        service dropbear restart 1>/dev/null 2>/dev/null
        sleep 1
        echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
        echo ''
        exit 69
    else
    	echo -e -n ""
    fi
    if [[ "$ss" = 'n' ]]; then
    	echo -e ""$Ver"Saindo..."
        sleep 1
    	exit 69
    fi
fi
fi
 echo -e "\033[1;37mInstalando dropbear..."
              apt-get update 1>/dev/null 2>/dev/null
              apt-get install dropbear -y 1>/dev/null 2>/dev/null
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo -e "\033[1;37mAdicionando porta..."
              echo "NO_START=0" > /etc/default/dropbear
              echo "DROPBEAR_PORT=$porta" >> /etc/default/dropbear
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo -e "\033[1;37mReniciando dropbear..."
              service dropbear start 1>/dev/null 2>/dev/null
              service dropbear restart 1>/dev/null 2>/dev/null
              sleep 1
              echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
              echo ''
              echo -e "\033[1;37mInstalacao finalizada com sucesso."
              exit 69
}

function users-gen {
# Gerenciador de usuarios
# V5
#!/bin/bash
# 
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
user()
{
echo -e " \033[0m            \033[47;30mUsuarios Criados\033[0m"
echo ""
echo -e "$b--------------------------------------------"
echo -e "\033[47;30m"$Ver"Usuario C.      Data de E.       Conexoes S.\033[0m"
echo -e "$b--------------------------------------------"
awk -F : '$3 >= 1000 { print $1 }' /etc/passwd | grep -v "nobody" > /tmp/users.txt
i=0
while read usuario
do
i=$(($i+1))
usurnum=$(ps -u $usuario |grep sshd |wc -l)
data=$(chage -l $usuario |grep -i co |awk -F : '{print $2}')
Dataa=$(printf '%-23s' "$data")
usuariio=$(printf ' %-14s' "$usuario")
cone=$(printf ' %-1s' "$usurnum")
echo -e ""$v"$usuariio $Dataa $cone"
echo -e "$b--------------------------------------------"
done < /tmp/users.txt
}
clear
echo -e "$b──────────────["$v"Gerenciador de usuarios"$b"]───────────────"
echo -e " \033[1;37m              ["$Ver"By: GlEmYsSoN OliVe'R"$b"]\033[0m"
echo -e "                   $v Att: 01/09/2017"
echo -e "\033[1;32mEscolha uma das opçoẽs:    \033[1;32mPara Voltar ao menu \033[1;31m10\033[1;33m"
echo ''
echo -e "$b["$v"01$b]$Ver DELETAR USUARIOS         $b["$v"11$b]$Ver REMOVER EXPIRADOS"
echo -e "$b["$v"02$b]$Ver CRIAR USUARIOS           $b["$v"12$b]$Ver BACKUP"
echo -e "$b["$v"03$b]$Ver ALTERAR SENHA            $b["$v"13$b]$Ver RESTAURAR"
echo -e "$b["$v"04$b]$Ver MUDAR DATA DE EXPIRAÇAO  $b["$v"14$b]$Ver CRIAR VARIOS $b($v"Lista"$b)$b"
echo -e "$b["$v"05$b]$Ver MUDAR LIMITE DE CONEXAO"
echo -e "$b["$v"06$b]$Ver VER USUARIOS CRIADOS"
echo -e "$b["$v"07$b]$Ver DETALHES DE TODOS"
echo -e "$b["$v"08$b]$Ver DELETAR VARIOS"
echo -e "$b["$v"09$b]$Ver CRIAR VARIOS $b($v"While"$b)$b"
echo -e "$b["$v"10$b]$Ver MENU PRINCIPAL"
echo ""
echo -e "$b[$v"Escolha uma opcao"$b]";read -p ": " opcao
clear
case $opcao in
1)
#!/bin/bash
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
clear
echo -e "==================Usuarios===================="
awk -F : '$3 >= 1000 { print $1 }' /etc/passwd | grep -v "nobody" > /tmp/users.txt
i=0
rm /tmp/users 1>/dev/null 2>/dev/null
echo -e "                  $b["$v"0$b] -$Ver Menu"
echo ''
while read usuario
do
i=$(($i+1))
echo -e "$b["$v"$i$b] -$Ver $usuario"
echo "$i: $usuario" >> /tmp/users
done < /tmp/users.txt
echo ''
num=$(cat /tmp/users | wc -l)
if [[ "$num" = '0' ]]; then
echo -e "\033[1;31mVoce nao tem usuarios existente\033[1;37m"
exit
else
true
fi
echo -n -e "\033[1;37mQual deseja deletar: ";read del
if [[ "$del" = '0' ]]; then
CONFVPS3
fi
user=$(cat /tmp/users | grep $del: | awk -F : {'print $2'})
us=$(echo $user)
echo -e "Deletando usuario \033[1;32m$us\033[1;37m"
pids=$(ps -u $us 1>/dev/null 2>/dev/null |awk {'print $1'})
 kill "$pids" >/dev/null 2>/dev/null
 rm "/etc/CONFVPS/limite/$us" 1>/dev/null 2>/dev/null
 rm "/etc/CONFVPS/senha/$us" 1>/dev/null 2>/dev/null
 rm "/etc/usuarios/$us.sh" 1>/dev/null 2>/dev/null
 userdel -f $us 1>/dev/null 2>/dev/null
echo -e "Usuario \033[1;32m$us\033[1;37m Deletado"
;;
2)
clear
read -p "Nome: " name
if cat /etc/passwd |grep $name: |grep -vi [a-z]$name |grep -v [0-9]$name > /dev/null
then
echo -e "\033[1;37mUsuario \033[1;31m$name \033[1;37mja existe"
exit
else
true
fi
read -p "Senha: " senha
read -p "Data: " dias
read -p "Limite: " limit
clear
limite $name $limit
validade=$(date '+%C%y/%m/%d' -d " +$dias days")
validadebr=$(date '+%d/%m/%C%y' -d " +$dias days")
sudo useradd -M -s /bin/false $name -e $validade 1>/dev/null 2>/dev/null
(echo $senha ; echo $senha) | passwd $name 1>/dev/null 2>/dev/null
IP=$(cat /etc/IP)
echo -e "\033[1;32m           Conta Criada Com Sucesso"
echo " "
echo -e "\033[1;33mIP:\033[1;37m $IP"
echo -e "\033[1;33mPortas SSH:\033[1;37m 443 e 22"
echo -e "\033[1;33mLogin:\033[1;37m $name"
echo -e "\033[1;33mSenha:\033[1;37m $senha"
echo -e "\033[1;33mProxy:\033[1;37m $IP"
echo -e "\033[1;33mPortas: \033[1;37m 3128 8080 & 80"
echo -e "\033[1;33mValidade:\033[1;37m $validadebr"
echo -e "\033[1;33mLimite de conexoes:\033[1;37m $limit"
echo "$senha" >/etc/CONFVPS/senha/$name
echo "$limit" >/etc/CONFVPS/limite/$name
exit
;;
3)
read -p "Nome: " nome
read -p "Nova Senha: " senha
(echo $senha ; echo $senha) | passwd $nome 1>/dev/null 2>/dev/null
sleep 1
echo -e "Senha do usuario $v$nome $bFoi\n Alterada Para $Ver$senha$b"
echo "$senha" >/etc/CONFVPS/usuarios/$nome
;;
4)
echo -e "$b"
echo -e "Ex: "$b"Dia: "$v"06
    "$b"Mes: "$v"07
    "$b"Ano: "$v"2017"
echo ""
echo -e "$b"Faca a Data Como Exemplo acima
echo -e "$v"
read -p "Nome: " nome
if cat /etc/passwd |grep $nome: > /dev/null
then
echo ""
else 
echo ""
echo -e ""$Ver"Usuario $b$nome$Ver Nao existe"
exit 
fi
read -p "Digite o dia: " dia
read -p "Digite o mes: " mes
read -p "Digite o ano: " ano
echo ""
if chage -E $dia/$mes/$ano $nome 1>/dev/null 2>/dev/null
then
echo -e ""$b"Nova Data Aplicada Ao Usuario$v $nome$b"
echo ""
echo -e "Usuario:$v $nome"
echo -e ""$b"Data de Expiracao:$v $dia/$mes/$ano" 
echo "".
else
echo -e $Ver Data invalida
sleep 1
echo -e "Por favor Revise Data que voce digitou"
sleep 1
fi
;;
5)
read -p "Usuario: " name
if cat /etc/passwd |grep $name: |grep -vi [a-z]$name |grep -v [0-9]$name > /dev/null
	then
read -p "Digite o Novo Limite: " limite
limite $name $limite
echo -e "Novo Limite Aplicado\nAo Usuario $v$name"
else
echo -e ""$Ver"Usuario $b$name$Ver Nao existe"
fi
;;
6)
user
;;
7)
echo -e "$b---------------------------------------------------------\033[0m"
echo -e "\033[47;30m "$Ver"Usuario.C        Senha.U         Data E.       Logins S.\033[0m"
echo -e "$b---------------------------------------------------------\033[0m"
for users in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |sort |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
do

if cat /etc/CONFVPS/limite/$users > /dev/null 2> /dev/null
then
limitecs=$(cat /etc/CONFVPS/limite/$users)
else
limitecs="null"
fi

if senha=$(cat /etc/CONFVPS/senha/$users > /dev/null 2> /dev/null)
then
senha=$(cat /etc/CONFVPS/senha/$users)
else
senha="null"
fi

data=$(chage -l $users |grep -i co |awk -F : '{print $2}')
if [ $data = never ] 2> /dev/null
then
date="null"
fi
detalhesdata=$(printf '%-18s' "$data")
detalheslimit=$(printf '%-10s' "$limitecs")
detalhes=$(printf ' %-15s' "$users")
detalhespass=$(printf '%-13s' "$senha")
echo -e "$v  $detalhes $detalhespass $detalhesdata $detalheslimit\033[0m"
echo -e "$b---------------------------------------------------------\033[0m"
done
exit
;;
8)
#!/bin/bash
clear # Limpar tela
awk -F : '$3 >= 1000 { print $1 }' /etc/passwd | grep -v "nobody" | grep -v "glemysson"> /tmp/users.txt
num=$(cat /tmp/users.txt | wc -l)
if [[ "$num" = '0' ]]; then
echo -e "\033[1;31mVoce nao tem usuarios existente\033[1;37m"
exit
else
true
fi
echo -e "\033[0m            \033[47;30mDeletar todos os usuarios\033[0m"
echo ''
echo -e '\033[1;32ms \033[1;37m-> para -> "\033[1;32msim\033[1;37m"'
echo -e '\033[1;32mn \033[1;37m-> para -> "\033[1;32mnao\033[1;37m"'
echo ''
for user in $(cat /etc/passwd |awk -F : '$3 > 900 {print $1}' |grep -v "glemysson" |grep -vi "nobody")
do
echo -e -n "\033[1;37mDeletar usuario \033[1;32m$user\033[1;37m: "
 read res
if [[ "$res" = "s" || "$res" = "sim" ]]; then
userpid=$(ps -u $user |awk {'print $1'})
kill "$userpid" 2>/dev/null
sudo userdel -f $user
echo -e "\033[1;37mUsuario: \033[1;31m$user \033[1;37mDeletado"
echo ''
 rm /etc/CONFVPS/limite/$user >/dev/null 2>/dev/null
 rm /etc/CONFVPS/senha/$user >/dev/null 2>/dev/null
 rm /etc/usuarios/$user >/dev/null 2>/dev/null
fi
if [[ "$res" = "n" || "$res" = "nao" ]]; then
echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
echo -e "\033[1;37mUsuario \033[1;31m$user \033[1;37mnao deletado"
echo ''
fi
done
;;
9)
read -p "Quantos usuarios?: " user
read -p "Nome: " nome
read -p "Senha: " senha
read -p "Limite: " limite
read -p "Data: " dias
clear
echo -e "            $b====>>>"$v"Usuarios criados"$b"<<<====="
echo ""
a=1
while [ $a -le $user ]
do
validade=$(date '+%C%y/%m/%d' -d " +$dias days")
validadebr=$(date '+%d/%m/%C%y' -d " +$dias days")
a=$(( $a + 1 ))
c=$(( $a - 1))
useradd -s /bin/false -M $nome$c -e $validade
( echo "$senha" ; echo "$senha" ) | passwd $nome$c 2>/dev/null
limite $nome$c $limite
echo -e ""$b"Usuario: $v$nome$c    "$b"Senha: $v$senha   "$b"Data.E: $v$validadebr"
echo "$senha" >/etc/CONFVPS/senha/$nome$c
done
;;
10)
CONFVPS3
;;
11)
echo -e "         \033[1;37mRemover Usuarios Expirados\033[0m"
datahoje=$(date +%s)
for user in $(cat /etc/passwd |grep -v "nobody" |awk -F : '$3 > 900 {print $1}')
do
dataexp=$(chage -l $user |grep "Account expires" |awk -F : '{print $2}')
if [[ $dataexp == ' never' ]]; then
id > /dev/null 2>/dev/null
else
dataexpn=$(date -d"$dataexp" '+%d/%m/%Y')
dataexpnum=$(date '+%s' -d"$dataexp")
fi
if [[ $dataexpnum < $datahoje ]]; then
printf "\033[1;31m"
printf '%-41s' $user
printf "\033[0m"
echo -e "\033[1;31mExpirado Deletado"
kill $(ps -u $user |awk '{print $1}') >/dev/null 2>/dev/null ; userdel $user
else
printf "\033[1;32m"
printf '%-41s' $user
printf "\033[0m"
echo $dataexpn
fi
done
;;
12)
echo -e ""$b"Fazendo backup..."
echo ''
for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`
do
if [ -e /etc/CONFVPS/senha/$user ]
then
pass=$(cat /etc/CONFVPS/senha/$user)
else
echo -e ""$Ver"Senha do usuario $b$user$Ver nao encontrada$b"
read -p "Qual a senha?: " pass
fi

if [ -e /etc/CONFVPS/limite/$user ]
then
limite=$(cat /etc/CONFVPS/limite/$user)
echo "$user:$pass:$limite" >> /etc/CONFVPS/backup
echo -e "\033[1;37mUsuario $user Backup ["$v"OK"$b"]\033[0m"
else
echo "$user:$pass" >> /etc/CONFVPS/backup
echo -e "\033[1;37mUsuario $user Backup ["$v"OK"$b"]\033[0m"
fi
done
sleep 1
echo -e "Backup completa"
echo '';sleep 1
echo -e "Arquivo "$Ver"backup"$b" esta no diretorio "$Ver"/etc/CONFVPS"$b""
echo '';sleep 1
echo -e "Por favor guarde ele pra uma breve restauração"
;;
13)
echo -e ""$b"Digite o diretorio do arquivo Backup"
read -p "Diretorio: " arq
echo ''
if [[ -f $arq ]]; then
echo -n
else
echo -e "$Ver""Falha"$b", arquivo nao encontrado"
exit
fi
echo -e "Restaurando usuarios..."
for user in `cat $arq`
do
usuario=$(echo "$user" |awk -F : '{print $1}')
senha=$(echo "$user" |awk -F : '{print $2}')
if cat /etc/passwd |grep $usuario: 1> /dev/null 2>/dev/null
then
echo " " > /dev/null
else
echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
  if [ $? = 0 ]
  then
  limite=$(echo "$user" |awk -F : '{print $3}')
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  limit $usuario $limite 1> /dev/null 2> /dev/null
  echo "$limite" > /etc/CONFVPS/limite/$usuario
  echo "$senha" > /etc/CONFVPS/senha/$usuario
  else
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  echo "$senha" > /etc/CONFVPS/senha/$usuario
  fi
  echo -e "$b""Usuario $v$usuario$b Restaurado"
fi
done
;;
14)
#!/bin/bash
clear
echo -e 'Abaixo digite o nome do arquivo.txt 
com os usuarios dentro. "Usuario:senha:data:Limite"
(Obs: arquivo deve estar no diretorio "/etc")'
printf "\033[1;32m"
read -p "Nome do arquivo: " di
if [[ -f "/etc/$di" ]]; then
 true
else
 echo -e "\033[1;31mArquivo nao encontrado."
 exit 1
fi
clear
echo -e "\033[1;32mCriando usuarios..."
for user in `cat /etc/$di`
do
usuario=$(echo "$user" |awk -F : '{print $1}')
senha=$(echo "$user" |awk -F : '{print $2}')
data=$(echo "$user" |awk -F : '{print $3}')
limite=$(echo "$user" |awk -F : '{print $4}')
if cat /etc/passwd | grep $usuario: 1>/dev/null 2>/dev/null
then
echo -e "\033[1;37mUsuario \033[1;31m$usuario\033[1;37m ja existe..."
else
echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
limite $usuario $limite
validade=$(date '+%C%y/%m/%d' -d " +$data days")
validadebr=$(date '+%d/%m/%C%y' -d " +$data days")
sudo useradd -M -s /bin/false $usuario -e $validade 1>/dev/null 2>/dev/null
(echo $senha ; echo $senha) | passwd $usuario 1>/dev/null 2>/dev/null
echo -e "\033[1;33mUsuario: \033[1;37m$usuario \033[1;33mSenha: \033[1;37m$senha \033[1;33mData: \033[1;37m$validadebr \033[1;33mLimite: \033[1;37m$limite"
echo "$senha" >/etc/CONFVPS/senha/$usuario
echo "$limite" >/etc/CONFVPS/limite/$usuario
fi
done
;;
*)
echo -e ""$Ver"Opcao Invalida!"
sleep 2
echo -e "Escolha uma das opcao"
sleep 2
users-gen
;;
esac
}

function monitor-ssh {
# Monitor ssh
# v2
clear
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
echo -e " \033[0m               \033[47;30mMONITOR-SSH\033[0m"
echo ""
echo -e "$b-------------------------------------------------"
echo -e "\033[47;30m"$Ver"Usuario.C         Data de.E           Conexoes.S \033[0m"
echo -e "$b-------------------------------------------------"
for usuario in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9] |sort`; do
if [ -f /etc/CONFVPS/limite/$usuario ]; then
limite=$(cat -n /etc/CONFVPS/limite/$usuario |awk '$1 = 1 {print $2}')
else
limite=null
fi
usurnum=$(ps -u $usuario |grep sshd |wc -l)
data=$(chage -l $usuario |grep -i co |awk -F : '{print $2}')
Dataa=$(printf '%-23s' "$data")
usuariio=$(printf ' %-14s' "$usuario")
cone=$(printf ' %-1s' "$usurnum")
echo -e ""$v"$usuariio $Dataa $cone/$limite"
echo -e "$b-------------------------------------------------"
done
}

function banner(){
sshd_config_bak=$(cat /etc/ssh/sshd_config |grep -v "Banner")
echo "$sshd_config_bak" > /etc/ssh/sshd_config
echo "Banner /etc/bannerssh" >> /etc/ssh/sshd_config
service ssh restart 1>/dev/null 2>/dev/null
service sshd restart 1>/dev/null 2>/dev/null
if [ -f /etc/bannerssh ]
then
banner=$(cat /etc/bannerssh)
else
banner="Sem banner"
fi
service ssh restart 1> /dev/null 2>/dev/null
service sshd restart 1>/dev/null 2>/dev/null
clear
echo -e "\033[0m                        \033[47;30mBANNER 2.0\033[0m"
echo ""
echo -e "Banner Atual"
echo ''
echo -e "$banner"
echo " "
echo -e "$b[$v"01"$b]$Ver ADICIONAR BANNER"
echo -e "$b[$v"02"$b]$Ver EXCLUIR BANNER"
echo -e "$b[$v"03"$b]$Ver MENU"
echo -e "$b"
read -p ": " opcao
case $opcao in
1)
clear
echo  -e ""$b"=========>>>"$v"MSG DO BANNER"$b"<<<========="
echo ""
read -p "Mensagens do banner: " banner
echo "$banner" > /etc/bannerssh
service ssh restart > /dev/null 2> /dev/null
service sshd restart > /dev/null 2> /dev/null
sleep 2
echo ""
echo -e ""$v"BANNER ADICIONADO COM SUCESSO..."
;;
2)
echo -e ""$Ver"EXCLUINDO BANNER..."
rm /etc/bannerssh > /dev/null 2> /dev/null
sleep 2
echo -e "BANNER EXCLUIDO..."
echo -e "$b"
;;
3)
CONFVPS3
;;
esac
}

function addhost {
#!/bin/bash
#cores
corPadrao="\033[0m"
preto="\033[0;30m"
vermelho="\033[0;31m"
verde="\033[0;32m"
amarelo="\033[0;33m"
azul="\033[0;34m"
purple="\033[0;35m"
cyan="\033[0;36m"
cinzaa="\033[0;37m"
pretoCinza="\033[1;30m"
vermelhoo="\033[1;31m"
verdee="\033[1;32m"
amareloo="\033[1;33m"
azull="\033[4;34m"
rosa="\033[1;35m"
cyann="\033[2;36m"
branco="\033[1;37m"
cyann="\033[2;36m"
# BY: Glemysson
clear
echo -e "Digite sua host que deseja adicionar
ao /etc/payloads"
echo ''
echo -e "\033[1;37mHost Atuais\033[1;31m"
if [[ -f /etc/payloads ]]; then
cat /etc/payloads
else
echo -e 'Sem hosts...'
exit
fi
printf "\033[1;37m"
read -p "host: " host
echo ".$host" >>/etc/payloads
sleep 1
echo -e "\033[1;37mSua host foi adiconada com sucesso\033[1;31m"
cat /etc/paylods
exit
}

function remove-confvps {
echo -e "Removendo CONFVPS..."
rm /bin/CONFVPS3 >/dev/null
rm /bin/speedtest >/dev/null
rm /bin/limite
rm -rf /etc/CONFVPS >/dev/null
rm -rf /etc/CONFVPS/senha >/dev/null
rm -rf /etc/CONFVPS/limite/dev/null
rm /etc/IP >/dev/null
rm /etc/dono >/dev/null
rm /etc/IPMENU >/dev/null
rm -rf /etc/usuarios >/dev/null
sleep 1
echo -e "CONFVPS Removido."
}

function vps-update {
#!/bin/bash
clear
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
echo -e ""$b"ATUALIZANDO REPOSITORIOS..."
if apt-get update -y 1>/dev/null 2>/dev/null
then
apt-get upgrade -y 1>/dev/null 2>/dev/null
echo ""
echo -e ""$v"Sucesso! "$b"REPOSITORIOS ATUALIZADOS COM SUCESSO.."
else
yum -y update 1>/dev/null 2>/dev/null
yum -y upgrade 1>/dev/null 2>/dev/null
echo ""
echo -e ""$v"Sucesso! "$b"REPOSITORIOS ATUALIZADOS COM SUCESSO.."
sleep 2
fi
}

function unistaller-modulos {
#!/bin/bash 
clear
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
echo -e ""$b"========>>>DIGITE NOME DO MODULO<<<========="
echo ""
read -p "Nome: " nome
if apt-get purge $nome -y 1>/dev/null 2>/dev/null
then
apt-get autoremove -y 1>/dev/null 2>/dev/null
echo -e ""$v"$nome Removido Com Sucesso!"
exit 69
else
yum remove $nome 1>/dev/null 2>/dev/null
sleep 1
echo -e ""$v"$nome Removido Com Sucesso!"
sleep 2
exit 69
fi
}

function alterar-senha {
#!/bin/bash
clear
echo -e -n "\033[1;32mNova senha: \033[1;37m";read senha
(echo $senha ; echo $senha) | passwd root 1>/dev/null 2>/dev/null
echo -e "\033[1;32mSenha root salva"
sleep 1
echo -e "\033[1;31mNova Senha:\033[1;32m $senha"
}

function reboot-vps {
#!/bin/bash
clear
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
echo -e ""$Ver"RENICIANDO VPS..."
sleep 1
reboot 1>/devnull 2>/dev/null
sleep 10000
}

function update-confvps {
cd
echo -e "Atualizando CONFVPS..."
wget -o /dev/null -O- https://raw.githubusercontent.com/GlEmYsSoN-LiNuX/CONFVPS3/master/CONFVPS3 > CONFVPS3
chmod a+x CONFVPS3
mv CONFVPS3 /bin
sleep 1
if cat /bin/CONFVPS3 | grep CONFVPS3: | awk -F : '{ print $2 }' 1>/dev/null 2>/dev/null ; then
echo -e "CONFVPS ja estar atualizado"
exit 69
fi
echo -e "CONFVPS Foi atalizado"
}

function ocultar-ip {
#!/bin/bash
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
clear
if cat /etc/IPMENU | grep OCULTADO >/dev/null; then
echo -e "           \033[1;37m[[ \033[1;32mIP JA FOI OCULTADO DO MENU \033[1;37m]]"
echo ''
sleep 0.4
echo -e "$b  ["$v"01$b]$Ver Desocultar "
echo -e "$b  ["$v"02$b]$Ver Sair "
echo ''
echo -e "$b┌─["$v"Escolha uma opcao"$b"]";read -p "└──> "  n
sleep 0.4
   if [[ "$n" = '2' ]]; then
   	echo -e 'Saindo...'
   	sleep 0.5
   	exit
   fi
   if [[ "$n" = '1' ]]; then
    echo -e ''
    echo -e '\033[1;32mDesocultando IP...'
    sleep 1
    ip=$(cat /etc/IP)
    echo "$ip" >/etc/IPMENU
     if cat /etc/IPMENU |grep $ip 1>/dev/null 2>/dev/null;then
        echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
     	echo -e '\033[1;32mIP foi desocultado com sucesso'
     	sleep 0.4
     	exit
     else
     	echo -e ""$b"["$Ver"Fail"$b"]$b Falha..."
        sleep 0.5
        echo ''
        echo -e "\033[1;37mFalha ao desocultar IP"
     	sleep 0.5
     	echo -e 'saindo...'
     	sleep 0.5
     	exit
     fi
   fi
fi
    echo -e "\033[1;32mOcultando IP..."
    sleep 1
    echo "OCULTADO" >/etc/IPMENU
    if cat /etc/IPMENU |grep OCULTAD >/dev/null; then
        echo -e ""$b"["$v"OK"$b"]$b Sucesso..."
     	echo -e '\033[1;32mIP foi ocultado com sucesso'
        sleep 1
        exit
     else
     	echo -e ""$b"["$Ver"Fail"$b"]$b Falha..."
        sleep 0.5
        echo ''
        echo -e "\033[1;37mFalha ao ocultar IP"
     	sleep 0.5
     	echo -e 'saindo...'
     	sleep 0.5
        exit
     fi
}

function remover-host {
# removedor de host 
# v1
echo -e "\033[0m                    \033[47;30mHost Atuais\033[0m"
echo ''
rm /tmp/pay > /dev/null
i=0
echo -e "                  $b["$v"0$b] -$Ver Menu"
echo ''
while read host
do
i=$(($i+1))
echo -e "$b["$v"$i$b] -$Ver $host"
echo "$i: $host" >> /tmp/pay
done < /etc/payloads
echo ''
printf "$b"
read -p "Qual host deseja remover: " ho
if [[ "$ho" = '0' ]]; then
CONFVPS3
fi
Re=$(cat /tmp/pay|grep $ho:|awk -F : {'print $2'})
vr=$(cat /etc/payloads|grep -v $Re)
echo "$vr" > /etc/payloads
echo ''
echo -e ""$b"Host$v$Re$b Removida"
}
#!/bin/bash
# cor
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"
if [ $(id -u) -eq 0 ]
then
	clear
else
	if echo $(id) |grep sudo > /dev/null
	then
	clear
	echo "Pqp Tu Nao Eh Usuario root vey,"
    sleep 2
    echo "Pra Virar user root Basta Digitar ( sudo su )"
    exit 69
	fi
fi
clear 
if [[ -d /etc/CONFVPS ]]; then
 echo -n
else
 mkdir /etc/CONFVPS
fi
if [[ -d /etc/CONFVPS/senha ]]; then
 echo -n
else
 mkdir /etc/CONFVPS/senha
fi
if [[ -d /etc/CONFVPS/limite ]]; then
 echo -n
else
 mkdir /etc/CONFVPS/limite
fi
IP=$(cat /etc/IPMENU)
echo -e "$b────────────────────────["$v"CONFVPS 2.0"$b"]────────────────────────"
echo -e "$b─────────────────────────────────────────────────────────────"
echo -e " \033[1;37m      CONFVPS V: FINAL ["$Ver"By: GlEmYsSoN OliVe'R"$b"]\033[0m"
echo -e "                 $v Att: 01/09/2017"
echo -e "\033[1;37mEscolha uma das opçoẽs:    \033[1;37mPara Sair escolha a opcao \033[1;31m0\033[1;33m"
echo -e "\033[1;37mSeu IP \033[1;37m(\033[1;32m$IP\033[1;37m)      \033[1;37mSeu nome (\033[1;32m$(cat /etc/dono)\033[1;37m)"
echo -e "                    $b["$v"0"$b"]$Ver Sair"
echo ""
echo -e "$b["$v"01$b]$Ver INSTALAR SQUID       $b["$v"11$b]$Ver DESISTALAR MODULOS"
echo -e "$b["$v"02$b]$Ver INSTALAR DROPBEAR    $b["$v"12$b]$Ver ALTERAR SENHA ROOT"
echo -e "$b["$v"03$b]$Ver INSTALAR OPENVPN     $b["$v"13$b]$Ver RENICIAR VPS"
echo -e "$b["$v"04$b]$Ver GERENCIAR USUARIOS   $b["$v"14$b]$Ver ATUALIZAR CONFVPS"
echo -e "$b["$v"05$b]$Ver MONITOR SSH          $b["$v"15$b]$Ver OCULTAR IP DO MENU"
echo -e "$b["$v"06$b]$Ver SPEEDTEST            $b["$v"16$b]$Ver REMOVER HOST"
echo -e "$b["$v"07$b]$Ver ADD BANNER"
echo -e "$b["$v"08$b]$Ver ADDHOST"
echo -e "$b["$v"09$b]$Ver REMOVER CONFVPS"
echo -e "$b["$v"10$b]$Ver UPDATE VPS"
echo -e "$b─────────────────────────────────────────────────────────────"
echo -e "$b────────────────────────["$v"CONFVPS 2.0"$b"]────────────────────────"
echo -e "$Ver"
echo -e "$b┌─["$v"Escolha uma opcao"$b"]";read -p "└──> "  opcao
clear
case $opcao in
1)
squid3-installer
;;
2)
dropbear-installer
;;
3)
vpn-installer
;;
4)
users-gen
;;
5)
monitor-ssh
;;
6)
speedtest
;;
7)
banner
;;
8)
addhost
;;
9)
remove-confvps
;;
0)
echo -e 'Obrigado por usar CONFVPS3'
exit
;;
10)
vps-update
;;
11)
unistaller-modulos
;;
12)
alterar-senha
;;
13)
reboot-vps
;;
14)
update-confvps
;;
15)
ocultar-ip
;;
16)
remover-host
;;
*)
echo -e "Erro..."
sleep 1
echo -e "opcao invalida..."
sleep 1
CONFVPS3
;;
esac
